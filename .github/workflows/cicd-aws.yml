# This workflow will build and push a new container image to Amazon ECR,

#
# To use this workflow, you will need to complete the following set-up steps:
#
# 1. Create an ECR repository to store your images.
#    For example: `aws ecr create-repository --repository-name my-ecr-repo --region us-east-2`.
#    Replace the value of the `ECR_REPOSITORY` environment variable in the workflow below with your repository's name.
#    Replace the value of the `AWS_REGION` environment variable in the workflow below with your repository's region.
#
#
# 4. Store an IAM user access key in GitHub Actions secrets named `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`.
#    See the documentation for each action used below for the recommended IAM policies for this IAM user,
#    and best practices on handling the access key credentials.

name: CICD to EC2 with ECR

on:

  workflow_dispatch:
  
  #push:
  #  branches:
  #    - "develop"

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}                                  # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: ${{ secrets.AWS_ECR_REPOSITORY }}                      # set this to your Amazon ECR repository name
  

permissions:
  contents: read

jobs:
  #njsscan:
  #  name: njsscan check
  #  runs-on: ubuntu-latest
  #  steps:
  #  - name: Checkout the code
  #    uses: actions/checkout@v2
  #  - name: nodejsscan scan
  #    id: njsscan
  #    uses: ajinabraham/njsscan-action@master
  #    with:
  #      args: '.'
    #- name: Mattermost Notification
    #  uses: tferreira/matterfy@releases/v1
    #  if: always()
    #  with:
    #    type: ${{ job.status }}
    #    job_name: '*security composition analysis*'
    #    channel: 'aws-cicd-pipeline'
    #    url: ${{ secrets.SLACK_WEBHOOK }}
    
  ci:
    name: build and test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [10.x, 12.x, 14.x, 15.x]
    steps:
    
    - name: Checkout the code
      uses: actions/checkout@v2    
      
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
    
    - name: Install Dependencies
      id:  idci
      run: npm ci
      continue-on-error: true
      
    # if package.json and package-lock.json files are unsync. then npm ci fails, we need to generate lock file again with package.json.
    
    - name: Check npm ci status. if fails regen lock file and install dependencies
      if: steps.idci.outcome == 'failure'
      run: |
        npm install --package-lock-only
        npm ci
        
    - name: Test code
      run: npm test
    - name: Build code
      run: npm run build --if-present

#  cd:
#    name: cd push image
#    runs-on: ubuntu-latest
#    env: 
#     environment: Dev
#
#    steps:
#    - name: Checkout
#      uses: actions/checkout@v3
#
#    - name: Configure AWS credentials
#      uses: aws-actions/configure-aws-credentials@v1
#      with:
#        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#        aws-region: ${{ env.AWS_REGION }}
#
#    - name: Login to Amazon ECR
#      id: login-ecr
#      uses: aws-actions/amazon-ecr-login@v1
#
#    - name: Build, tag, and push image to Amazon ECR
#      id: build-image
#      env:
#        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#        IMAGE_TAG: ${{ github.sha }}
#      run: |
#        # Build a docker container and
#        # push it to ECR so that it can
#        # be deployed to ECS.
#        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
#        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
#        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

  
