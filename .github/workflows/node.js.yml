name: integration and building stage
on:
  push:
    branches: [ develop ]
  pull_request:
    branches: [ develop ]

jobs:
  ci:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [10.x, 12.x, 14.x, 15.x]
    steps:
    - name: pull code
      uses: actions/checkout@v2      
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }} 
    - name: continues integration 
      run: npm ci
    - name: testing the code
      run: npm test
    - name: building the code
      run: npm run build --if-present
      
  cd:
    runs-on: ubuntu-latest
    needs: ci
    steps:
      - name: code checkout
        uses: actions/checkout@v1
      - name: Docker login
        run: docker login -u ${{ secrets.DOCKER_USER }} -p ${{ secrets.DOCKER_PASSWORD }}
      - name: image Build
        run: docker build -t node-app  .
      - name: Tags
        run: |
          docker tag node-app ${{ secrets.DOCKER_USER }}/node-app:${{ github.sha }}
          docker tag node-app ${{ secrets.DOCKER_USER }}/node-app:latest
      - name: Push
        run: |
          docker push ${{ secrets.DOCKER_USER }}/node-app:${{ github.sha }}
          docker push ${{ secrets.DOCKER_USER }}/node-app:latest
  deploy:
    needs: cd
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    steps:
      - name: code pull
        uses: actions/checkout@v2
      - name: Add the private SSH key to the ssh-agent
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan github.com >> ~/.ssh/known_hosts
          echo "${{ secrets.SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          cat <<EOT >> ~/.ssh/config
          Host github.com
          HostName github.com
          IdentityFile ~/.ssh/id_rsa
          EOT
          
      - name: Login to docker hub
        uses: actions-hub/docker/login@master
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
          
      - name: Build and deploy images on DigitalOcean
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }} 
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
        run: |
          ssh -o StrictHostKeyChecking=no root@${{ secrets.SSH_HOST }} << 'ENDSSH'
            docker-compose -f docker-compose.yml up -d
          ENDSSH
