name: integration and building stage
on:
  push:
    branches: [ develop ]
  pull_request:
    branches: [ develop ]

jobs:
  ci:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [10.x, 12.x, 14.x, 15.x]
    steps:
    
    - name: pull code
      uses: actions/checkout@v2      
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
    - name: Create .env file
      uses: ./
      env:
        JWT_SECRET: ${{ secrets.JWT_SECRET }}
        DB_NAME: ${{ secrets.POSTGRES_DB }}
        DB_USERNAME: ${{ secrets.POSTGRES_USER }}
        DB_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        DB_PORT: ${{ secrets.POSTGRES_PORT }}
        SCHEMA_NAME: ${{ secrets.SCHEMA_NAME }}
        NODE_ENV: ${{ secrets.NODE_ENV }}
        SESSION_SECRET: ${{ secrets.SESSION_SECRET }}
        PORT: ${{ secrets.NODE_PORT }}
        SALT: ${{ secrets.SALT }}
        
    - name: continues integration 
      run: npm ci
    - name: testing the code
      run: npm test
    - name: building the code
      run: npm run build --if-present
      
  cd:
    runs-on: ubuntu-latest
    needs: ci
    steps:
      - name: code checkout
        uses: actions/checkout@v1
      - name: Docker login
        run: docker login -u ${{ secrets.DOCKER_USER }} -p ${{ secrets.DOCKER_PASSWORD }}
      - name: image Build
        run: docker build -t node-app  .
      - name: Tags
        run: |
          docker tag node-app ${{ secrets.DOCKER_USER }}/node-app:${{ github.sha }}
          docker tag node-app ${{ secrets.DOCKER_USER }}/node-app:latest
      - name: Push
        run: |
          docker push ${{ secrets.DOCKER_USER }}/node-app:${{ github.sha }}
          docker push ${{ secrets.DOCKER_USER }}/node-app:latest
  deploy:
    needs: cd
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    steps:
      - name: code pull
        uses: actions/checkout@v2
      - name: Add environment variables to .env
        run: |
          echo DB_NAME=${{ secrets.POSTGRES_DB }} >> .env
          echo DB_USERNAME=${{ secrets.POSTGRES_USER }} >> .env
          echo DB_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .env
          
          
      - name: Add the private SSH key to the ssh-agent
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_KEY }}" | tr -d '\r' > ~/.ssh/id_rsa
          chmod 700 ~/.ssh/id_rsa
          eval "$(ssh-agent -s)"
          ssh-add ~/.ssh/id_rsa
          ssh-keyscan -H 'gitlab.com' >> ~/.ssh/known_hosts    
      - name: Build and deploy images on DigitalOcean
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }} 
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
        run: |
         scp  -o StrictHostKeyChecking=no -r ./.env ./docker-compose.yml root@${{ secrets.SSH_HOST }}:~/
         ssh -o StrictHostKeyChecking=no root@${{ secrets.SSH_HOST }} << 'ENDSSH'
          source .env
          docker login -u ${{ secrets.DOCKER_USER }} -p ${{ secrets.DOCKER_PASSWORD }} 
          docker-compose -f docker-compose.yml up -d
         ENDSSH
